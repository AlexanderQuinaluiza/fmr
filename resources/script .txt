ALTER TABLE DESCUENTOS
DROP  foreign key FK_TIENE_DESCUENTO;

ALTER TABLE DESCUENTOS
DROP COLUMN ID_PRO;

create TABLE DETALLES_DESCUENTOS(
ID_PRO BIGINT(20) NOT NULL,
ID_DESC BIGINT NOT NULL,
CONSTRAINT FK_PROD_DET_DESC FOREIGN KEY (ID_PRO) REFERENCES PRODUCTOS(ID_PRO),
CONSTRAINT FK_DESC_DET_DESC FOREIGN KEY (ID_DESC) REFERENCES DESCUENTOS(ID_DESC)
) ENGINE InnoDB;


CREATE DEFINER=`root`@`localhost` PROCEDURE `pGetDescuentoByProducto`(IN `idproducto` INT)
NO SQL
begin
SELECT d.PORCENTAJE_DESC from DESCUENTOS as d,
PRODUCTOS as p ,DETALLES_DESCUENTOS as dt WHERE p.ID_PRO = dt.ID_PRO AND
p.ID_PRO = idproducto AND
CURRENT_DATE <= cast(d.FECHA_FIN_DESC as date)
AND d.ESTADO_DESC=1
and dt.ID_DESC=d.ID_DESC
limit 1;
END

/**
*trigger para insertar datos en inventario (TIPO COMPRAS)
*/
DELIMITER $$
CREATE DEFINER=`root`@`localhost` TRIGGER `registroCompraEnInventario` AFTER INSERT ON `DETALLE_COMPRAS`
FOR EACH ROW BEGIN
DECLARE FACTURA_COMPRA VARCHAR(200) DEFAULT 'sin factura';
DECLARE DESCRIPCION_COMPRA VARCHAR(140) DEFAULT '';
DECLARE FECHA_COMPRA TIMESTAMP;
DECLARE TOTAL FLOAT DEFAULT 0;
DECLARE TIPO_ITEM VARCHAR(50) DEFAULT 'compra';
DECLARE CANTIDAD_EXISTENCIA BIGINT DEFAULT 0;
DECLARE VALOR_EXISTENCIA FLOAT DEFAULT 0;
DECLARE TOTAL_EXISTENCIA FLOAT DEFAULT 0;
DECLARE CANTIDAD_ULTIMA BIGINT DEFAULT 0;
DECLARE TOTAL_ULTIMO FLOAT DEFAULT 0;
DECLARE PORCENTAJE_DESCUENTO FLOAT DEFAULT 0;
DECLARE DESCUENTO FLOAT DEFAULT 0;

DECLARE PORCENTAJE_GANANCIA FLOAT DEFAULT 0;
/*recuperar datos desde la tabla maestra COMPRAS*/
SET FACTURA_COMPRA =     (SELECT FACTURA_PROV FROM COMPRAS WHERE ID_COMP = NEW.ID_COMP LIMIT 1);
SET DESCRIPCION_COMPRA = (SELECT DESCRIPCION_COMP FROM COMPRAS WHERE ID_COMP = NEW.ID_COMP LIMIT 1);
SET FECHA_COMPRA = (SELECT FECHA_COMP FROM COMPRAS WHERE ID_COMP = NEW.ID_COMP LIMIT 1);
SET TOTAL = (NEW.CANTIDAD_PRO * NEW.PRECIO_COMP);
SET CANTIDAD_ULTIMA = (SELECT IFNULL( (SELECT CANTIDAD_EXIST FROM INVENTARIOS WHERE ID_PRO = NEW.ID_PRO ORDER BY ID DESC LIMIT 1) ,0));
SET TOTAL_ULTIMO = (SELECT IFNULL( (SELECT TOTAL_EXIST FROM INVENTARIOS WHERE ID_PRO = NEW.ID_PRO ORDER BY ID DESC LIMIT 1) ,0));
SET PORCENTAJE_GANANCIA = (SELECT GANANCIA_PRO FROM PRODUCTOS WHERE ID_PRO = NEW.ID_PRO LIMIT 1);
SET CANTIDAD_EXISTENCIA = (CANTIDAD_ULTIMA + NEW.CANTIDAD_PRO);
SET TOTAL_EXISTENCIA = (TOTAL_ULTIMO + TOTAL);
SET VALOR_EXISTENCIA = (TOTAL_EXISTENCIA / CANTIDAD_EXISTENCIA);
SET PORCENTAJE_DESCUENTO = ( SELECT fGetDescuentoByProducto(NEW.ID_PRO) );
SET PORCENTAJE_DESCUENTO = ( SELECT IFNULL(PORCENTAJE_DESCUENTO,0) );
/*SET PORCENTAJE_DESCUENTO = (SELECT IFNULL((SELECT pGetDescuentoByProducto(NEW.ID_PRO)),0))*/
SET DESCUENTO = (VALOR_EXISTENCIA/(1-PORCENTAJE_GANANCIA)*PORCENTAJE_DESCUENTO);


INSERT INTO INVENTARIOS (ID_PRO,ID_TIPO,DOC_REFERENCIA,DESCRIPCION,FECHA_COM,CANTIDAD_PRO,VALOR,TOTAL,TIPO_ITEM,CANTIDAD_EXIST,VALOR_EXIST,TOTAL_EXIST)
VALUES(NEW.ID_PRO,NEW.ID_COMP,FACTURA_COMPRA,DESCRIPCION_COMPRA,FECHA_COMPRA,NEW.CANTIDAD_PRO,NEW.PRECIO_COMP,
TOTAL, TIPO_ITEM,CANTIDAD_EXISTENCIA, VALOR_EXISTENCIA, TOTAL_EXISTENCIA);

UPDATE PRODUCTOS SET COSTO_PRO = VALOR_EXISTENCIA, PRECIO_VENTA_PRO =  (VALOR_EXISTENCIA/(1-PORCENTAJE_GANANCIA))+DESCUENTO,
STOCK_PRO = CANTIDAD_EXISTENCIA,PRECIO_PROMOCIONAL_PRO = VALOR_EXISTENCIA/(1-PORCENTAJE_GANANCIA)  WHERE ID_PRO = NEW.ID_PRO;

END$$
DELIMITER ;

/**
*trigger para insertar datos en inventario (TIPO COMPRAS)
*/
DELIMITER $$
CREATE DEFINER=`root`@`localhost` TRIGGER `registroCompraEnInventario` AFTER INSERT ON `DETALLE_COMPRAS`
FOR EACH ROW BEGIN
DECLARE FACTURA_COMPRA VARCHAR(200) DEFAULT 'sin factura';
DECLARE DESCRIPCION_COMPRA VARCHAR(140) DEFAULT '';
DECLARE FECHA_COMPRA TIMESTAMP;
DECLARE TOTAL FLOAT DEFAULT 0;
DECLARE TIPO_ITEM VARCHAR(50) DEFAULT 'compra';
DECLARE CANTIDAD_EXISTENCIA BIGINT DEFAULT 0;
DECLARE VALOR_EXISTENCIA FLOAT DEFAULT 0;
DECLARE TOTAL_EXISTENCIA FLOAT DEFAULT 0;
DECLARE CANTIDAD_ULTIMA BIGINT DEFAULT 0;
DECLARE TOTAL_ULTIMO FLOAT DEFAULT 0;
DECLARE PORCENTAJE_DESCUENTO FLOAT DEFAULT 0;
DECLARE DESCUENTO FLOAT DEFAULT 0;

DECLARE PORCENTAJE_GANANCIA FLOAT DEFAULT 0;
/*recuperar datos desde la tabla maestra COMPRAS*/
SET FACTURA_COMPRA =     (SELECT FACTURA_PROV FROM COMPRAS WHERE ID_COMP = NEW.ID_COMP LIMIT 1);
SET DESCRIPCION_COMPRA = (SELECT DESCRIPCION_COMP FROM COMPRAS WHERE ID_COMP = NEW.ID_COMP LIMIT 1);
SET FECHA_COMPRA = (SELECT FECHA_COMP FROM COMPRAS WHERE ID_COMP = NEW.ID_COMP LIMIT 1);
SET TOTAL = (NEW.CANTIDAD_PRO * NEW.PRECIO_COMP);
SET CANTIDAD_ULTIMA = (SELECT IFNULL( (SELECT CANTIDAD_EXIST FROM INVENTARIOS WHERE ID_PRO = NEW.ID_PRO ORDER BY ID DESC LIMIT 1) ,0));
SET TOTAL_ULTIMO = (SELECT IFNULL( (SELECT TOTAL_EXIST FROM INVENTARIOS WHERE ID_PRO = NEW.ID_PRO ORDER BY ID DESC LIMIT 1) ,0));
SET PORCENTAJE_GANANCIA = (SELECT GANANCIA_PRO FROM PRODUCTOS WHERE ID_PRO = NEW.ID_PRO LIMIT 1);
SET CANTIDAD_EXISTENCIA = (CANTIDAD_ULTIMA + NEW.CANTIDAD_PRO);
SET TOTAL_EXISTENCIA = (TOTAL_ULTIMO + TOTAL);
SET VALOR_EXISTENCIA = (TOTAL_EXISTENCIA / CANTIDAD_EXISTENCIA);
SET PORCENTAJE_DESCUENTO = ( SELECT fGetDescuentoByProducto(NEW.ID_PRO) );
SET PORCENTAJE_DESCUENTO = ( SELECT IFNULL(PORCENTAJE_DESCUENTO,0) );
/*SET PORCENTAJE_DESCUENTO = (SELECT IFNULL((SELECT pGetDescuentoByProducto(NEW.ID_PRO)),0))*/
SET DESCUENTO = (VALOR_EXISTENCIA/(1-PORCENTAJE_GANANCIA)*PORCENTAJE_DESCUENTO);


INSERT INTO INVENTARIOS (ID_PRO,ID_TIPO,DOC_REFERENCIA,DESCRIPCION,FECHA_COM,CANTIDAD_PRO,VALOR,TOTAL,TIPO_ITEM,CANTIDAD_EXIST,VALOR_EXIST,TOTAL_EXIST)
VALUES(NEW.ID_PRO,NEW.ID_COMP,FACTURA_COMPRA,DESCRIPCION_COMPRA,FECHA_COMPRA,NEW.CANTIDAD_PRO,NEW.PRECIO_COMP,
TOTAL, TIPO_ITEM,CANTIDAD_EXISTENCIA, VALOR_EXISTENCIA, TOTAL_EXISTENCIA);

UPDATE PRODUCTOS SET COSTO_PRO = VALOR_EXISTENCIA, PRECIO_VENTA_PRO =  (VALOR_EXISTENCIA/(1-PORCENTAJE_GANANCIA))+DESCUENTO,
STOCK_PRO = CANTIDAD_EXISTENCIA,PRECIO_PROMOCIONAL_PRO = VALOR_EXISTENCIA/(1-PORCENTAJE_GANANCIA)  WHERE ID_PRO = NEW.ID_PRO;

END$$
DELIMITER ;

/**
*trigger para insertar datos en inventario (TIPO DEVOLUCION-COMPRAS)
*/
DELIMITER $$
CREATE DEFINER=`root`@`localhost` TRIGGER `registroDevolucionCompraEnInventario` AFTER INSERT ON `DETALLE_DEVOLUCIONES`
FOR EACH ROW BEGIN
DECLARE NOTA_CREDITO VARCHAR(200) DEFAULT 'sin nota crédito';
DECLARE TIPO VARCHAR(120) DEFAULT 'Nota de crédito';
DECLARE DESCRIPCION_DEVOLUCION VARCHAR(120) DEFAULT '';
DECLARE FECHA_DEVOLUCION TIMESTAMP;
DECLARE PRECIO_COMPRA FLOAT DEFAULT 0;
DECLARE ID_COMPRA BIGINT DEFAULT 0;
DECLARE NUMERO_DOC BIGINT DEFAULT 0;
DECLARE TOTAL FLOAT DEFAULT 0;
DECLARE TIPO_ITEM VARCHAR(50) DEFAULT 'devolucion-compra';
DECLARE CANTIDAD_EXISTENCIA BIGINT DEFAULT 0;
DECLARE VALOR_EXISTENCIA FLOAT DEFAULT 0;
DECLARE TOTAL_EXISTENCIA FLOAT DEFAULT 0;
DECLARE CANTIDAD_ULTIMA BIGINT DEFAULT 0;
DECLARE TOTAL_ULTIMO FLOAT DEFAULT 0;
DECLARE PORCENTAJE_DESCUENTO FLOAT DEFAULT 0;
DECLARE DESCUENTO FLOAT DEFAULT 0;


DECLARE PORCENTAJE_GANANCIA FLOAT DEFAULT 0;
/*recuperar datos desde la tabla maestra COMPRAS*/
SET NUMERO_DOC = (SELECT NUMERO_NC FROM DEVOLUCIONES WHERE ID_DEV = NEW.ID_DEV LIMIT 1);
SET NOTA_CREDITO =     (SELECT CONCAT(TIPO," ",NUMERO_DOC));

SET DESCRIPCION_DEVOLUCION = (SELECT OBSERVACION_DEV FROM DEVOLUCIONES WHERE ID_DEV = NEW.ID_DEV LIMIT 1);
SET FECHA_DEVOLUCION = (SELECT FECHA_DEV FROM DEVOLUCIONES WHERE ID_DEV = NEW.ID_DEV LIMIT 1);
SET ID_COMPRA = (SELECT ID_COMP FROM DEVOLUCIONES WHERE ID_DEV = NEW.ID_DEV LIMIT 1);
SET PRECIO_COMPRA = (SELECT PRECIO_COMP FROM DETALLE_COMPRAS WHERE ID_COMP = ID_COMPRA AND ID_PRO = NEW.ID_PRO);

SET TOTAL = (NEW.CANTIDAD_PRO_DEV * PRECIO_COMPRA);
SET CANTIDAD_ULTIMA = (SELECT IFNULL( (SELECT CANTIDAD_EXIST FROM INVENTARIOS WHERE ID_PRO = NEW.ID_PRO ORDER BY ID DESC LIMIT 1) ,0));
SET TOTAL_ULTIMO = (SELECT IFNULL( (SELECT TOTAL_EXIST FROM INVENTARIOS WHERE ID_PRO = NEW.ID_PRO ORDER BY ID DESC LIMIT 1) ,0));
SET PORCENTAJE_GANANCIA = (SELECT GANANCIA_PRO FROM PRODUCTOS WHERE ID_PRO = NEW.ID_PRO LIMIT 1);
SET CANTIDAD_EXISTENCIA = (CANTIDAD_ULTIMA - NEW.CANTIDAD_PRO_DEV);
SET TOTAL_EXISTENCIA = (TOTAL_ULTIMO - TOTAL);
SET VALOR_EXISTENCIA = (TOTAL_EXISTENCIA / CANTIDAD_EXISTENCIA);
SET PORCENTAJE_DESCUENTO = ( SELECT fGetDescuentoByProducto(NEW.ID_PRO) );
SET PORCENTAJE_DESCUENTO = ( SELECT IFNULL(PORCENTAJE_DESCUENTO,0) );
/*SET PORCENTAJE_DESCUENTO = (SELECT IFNULL((SELECT pGetDescuentoByProducto(NEW.ID_PRO)),0))*/
SET DESCUENTO = (VALOR_EXISTENCIA/(1-PORCENTAJE_GANANCIA)*PORCENTAJE_DESCUENTO);

INSERT INTO INVENTARIOS (ID_PRO,ID_TIPO,DOC_REFERENCIA,DESCRIPCION,FECHA_COM,CANTIDAD_PRO,VALOR,TOTAL,TIPO_ITEM,CANTIDAD_EXIST,VALOR_EXIST,TOTAL_EXIST)
VALUES(NEW.ID_PRO,NEW.ID_DEV,NOTA_CREDITO,DESCRIPCION_DEVOLUCION,FECHA_DEVOLUCION,NEW.CANTIDAD_PRO_DEV,PRECIO_COMPRA,
TOTAL, TIPO_ITEM,CANTIDAD_EXISTENCIA, VALOR_EXISTENCIA, TOTAL_EXISTENCIA);

UPDATE PRODUCTOS SET COSTO_PRO = VALOR_EXISTENCIA, PRECIO_VENTA_PRO =  (VALOR_EXISTENCIA/(1-PORCENTAJE_GANANCIA))+DESCUENTO,
STOCK_PRO = CANTIDAD_EXISTENCIA,PRECIO_PROMOCIONAL_PRO = VALOR_EXISTENCIA/(1-PORCENTAJE_GANANCIA) WHERE ID_PRO = NEW.ID_PRO;

END$$
DELIMITER ;


/*estructura tabla inventarios*/
create table INVENTARIOS
(
   ID                   bigint not null auto_increment comment 'id item inventario',
   ID_PRO               bigint comment 'id de producto',
   ID_TIPO              bigint comment 'id compra,venta,devolucion-compra/venta',
   DOC_REFERENCIA       varchar(200) comment 'documento de referencia factura/nota de crédito',
   DESCRIPCION          varchar(200) comment 'descripcion item inventario',
   FECHA_COM            timestamp default CURRENT_TIMESTAMP comment 'fecha de compra,venta,devolucion de producto',
   CANTIDAD_PRO         int comment 'cantidad de producto comprado,vendido,devuelto',
   VALOR                float comment 'valor costo producto',
   TOTAL                float comment 'subtotal producto',
   TIPO_ITEM            varchar(50) comment 'tipo :venta,compra,devolucion compra,devolucion venta',
   CANTIDAD_EXIST       bigint comment 'cantidad real en stock',
   VALOR_EXIST          float comment 'valor costo de producto',
   TOTAL_EXIST          float comment 'total costo producto',
   primary key (ID)
)ENGINE=InnoDB;

alter table INVENTARIOS add constraint FK_ESTA_EN_INVENTARIO foreign key (ID_PRO)
      references PRODUCTOS (ID_PRO) ;
/** procedimiento para verificar si la caja esta aperturada*/

drop procedure if exists spGetApertura;
create procedure spGetApertura(in caja int, in usuario int)
select count(ID_CCJ) as resultado from CIERRE_CAJA 
where date_format(FECHA_APERTUTA_CCJ,'%d-%m-%Y') = date_format(sysdate(),'%d-%m-%Y')
AND ID_CAJA=caja and ID_USU= usuario;

/** procedimiento para sacar los datos de cabecera de factura ***/
drop procedure if exists spGetCabeceraFac;

create procedure spGetCabeceraFac(in usuario int)
select g.ID_AGE, g.NOMBRE_AGE, g.DIRECCION_AGE, g.RUC_AGE, g.LOGO_AGE, c.DESCRIPCION_CAJA
from AGENCIAS g, CAJAS c,USUARIOS u
WHERE g.ID_AGE = c.ID_CAJA
and c.ID_CAJA=u.ID_CAJA
and g.ESTADO_AGE=1 and c.ESTADO=1
and u.ID_USU=usuario;

/** agregar campos tabla ventas y detalle ventas*/
alter table VENTAS
ADD column SUBT_IVA NUMERIC(10,2) NOT NULL DEFAULT 0;

alter table VENTAS
ADD column SUBT_CERO NUMERIC(10,2) NOT NULL DEFAULT 0;

alter table VENTAS
ADD column TOTAL_DESC NUMERIC(10,2) NOT NULL DEFAULT 0;

alter table VENTAS
modify COLUMN IVA_VEN NUMERIC(10,2) NOT NULL DEFAULT 0;

alter table VENTAS
modify COLUMN TOTAL_VEN NUMERIC(10,2) NOT NULL DEFAULT 0;

alter table DETALLE_VENTAS
ADD column AHORRO NUMERIC(10,2) NOT NULL DEFAULT 0;

alter table DETALLE_VENTAS
ADD column SUBTOTAL NUMERIC(10,2) NOT NULL DEFAULT 0;

/** TRIGGER AFTER INSERT VENTAS- ACTUALIZA DOCUMENTOS Y INSERTA COMPROBANTE**/

DELIMITER //
create trigger trgInsertVentas
after insert on VENTAS
for each row
begin
DECLARE NUMFAC BIGINT DEFAULT 0;
SET NUMFAC = (SELECT EMPEZAR FROM DOCUMENTOS
              WHERE DOCUMENTOS.TIPO_DOC='Factura');
              

/* INGRESO DE UN NUEVO COMPROBANTE */
insert into COMPROBANTES(TIPO_DOC,ID_VEN,NUMERO_COM) VALUES('Factura',NEW.ID_VEN,NUMFAC);
/* ACTUALIZACION DEL CAMPO EMPEZAR EN LA TABLA DOCUMENTOS */
UPDATE DOCUMENTOS 
SET EMPEZAR=NUMFAC+1
WHERE TIPO_DOC='Factura';


end;
//

/** trigger calculos y set ventas y detalle ventas*/

drop trigger if exists trgInsertBeforeDetallesVentas;
Delimiter //
create trigger trgInsertBeforeDetallesVentas
before insert on DETALLE_VENTAS
for each row
begin
declare total numeric(10,2) default 0;
declare iva numeric(10,2) default 0;
declare subiva numeric(10,2)default 0;
declare subcero numeric(10,2) default 0;
declare totaldesc numeric(10,2) default 0;
/** ID_VEN, ID_USU, ID_CLI, FECHA_VEN, DESCRIPCION_VEN, IVA_VEN, TOTAL_VEN, ESTADO, SUBT_IVA, SUBT_CERO, TOTAL_DESC */
declare subtotaldel numeric(10,2) default 0;
/**ID_DET_VEN, ID_PRO, ID_VEN, CANTIDAD_PRO, PRECIO_VEN, AHORRO*/
set new.PRECIO_VEN=(select p.PRECIO_VENTA_PRO from PRODUCTOS p
 where p.ID_PRO=new.ID_PRO);
set new.AHORRO=(select p.PRECIO_VENTA_PRO*new.CANTIDAD_PRO - p.PRECIO_PROMOCIONAL_PRO*new.CANTIDAD_PRO from PRODUCTOS p
 where p.ID_PRO=new.ID_PRO); 
 
set new.SUBTOTAL=(select p.PRECIO_VENTA_PRO*new.CANTIDAD_PRO from PRODUCTOS p
where p.ID_PRO=new.ID_PRO); 

 
 set subcero=( select sum(v.SUBTOTAL)
			  from PRODUCTOS p,DETALLE_VENTAS v
             where v.ID_VEN=1
             and p.ID_PRO=v.ID_PRO
             and p.APLICA_IVA_PRO=1);
             
set subiva=( select sum(v.SUBTOTAL)
			 from PRODUCTOS p,DETALLE_VENTAS v
             where v.ID_VEN=1
             and p.ID_PRO=v.ID_PRO
             and p.APLICA_IVA_PRO=0);
             
             set totaldesc=(select sum(AHORRO)   
             from DETALLE_VENTAS
             where ID_VEN=1); 
             /* SELECT IVA*/
set iva=(select subiva*VALOR_CONF from CONFIGURACIONES where ID_CONF=2);

set total=(subcero+subiva-totaldesc+iva); 
update VENTAS
SET IVA_VEN=iva,
TOTAL_VEN=total,
SUBT_IVA= subiva, SUBT_CERO=subcero, TOTAL_DESC=totaldesc
WHERE ID_VEN=new.ID_VEN;
 end;
//

/********* add column ejemplares para guardar el estado ***///

alter table  EJEMPLARES
add column ESTADO tinyint not null default 1;

/*funcion para obtener descuento de un producto*/
DELIMITER $$
CREATE DEFINER=`root`@`localhost` FUNCTION `fGetDescuentoByProducto`(`idproducto` INT) RETURNS FLOAT(10,2)
    NO SQL
begin
declare descuento float(10,2) default 0.00;
SET descuento =
(SELECT d.PORCENTAJE_DESC from DESCUENTOS as d,
PRODUCTOS as p ,DETALLES_DESCUENTOS as dt WHERE p.ID_PRO = dt.ID_PRO AND
p.ID_PRO = idproducto AND
CURRENT_DATE <= cast(d.FECHA_FIN_DESC as date)
AND d.ESTADO_DESC=1
and dt.ID_DESC=d.ID_DESC
limit 1);
return descuento;
END$$
DELIMITER ;


alter table MODULOS
ADD column SECCION VARCHAR(140) NOT NULL DEFAULT 'Almacén';
/*** Tablas devoluciones_ventas y devoluciones_detalle_ventas ***/


/**ID_VEN, ID_USU, ID_CLI, FECHA_VEN, DESCRIPCION_VEN, IVA_VEN, TOTAL_VEN, ESTADO, SUBT_IVA, SUBT_CERO, TOTAL_DESC*/

create table DEVOLUCIONES_VENTAS
(
   ID_DEV_VEN          bigint not null auto_increment,
   ID_VEN              bigint,
   ID_USU               int,
   TOTAL_DEV            float,
   IVA_DEV              float,
   SUBT_IVA             float,
   SUBT_CERO            float,
   OBSERVACION_DEV      varchar(120),
   FECHA_DEV            timestamp default CURRENT_TIMESTAMP,
   primary key (ID_DEV_VEN)
);

/*ID_DET_VEN, ID_PRO, ID_VEN, CANTIDAD_PRO, PRECIO_VEN, AHORRO, SUBTOTAL*/
alter table DEVOLUCIONES_VENTAS add constraint FK_RELATIONSHIP_DEV_VEN foreign key (ID_VEN)
      references VENTAS (ID_VEN);
create table DETALLE_DEVOLUCIONES_VENTAS
(
   ID_DET_DEV_VEN       bigint not null auto_increment,
   ID_DEV_VEN               bigint,
   CANTIDAD             bigint,
   PRECIO_VEN           float,
   AHORRO               decimal(10,2),
   SUBTOTAL             decimal(10,2), 
   PRODUCTO             varchar(130),
   OBSERVACION_DEV      varchar(120),
   primary key (ID_DET_DEV_VEN)
);
alter table DETALLE_DEVOLUCIONES_VENTAS add constraint FK_RELATIONSHIP_DEVDETA_VEN foreign key (ID_DEV_VEN)
      references DEVOLUCIONES_VENTAS (ID_DEV_VEN);
/***************************************2018-12-06********************************************************/
ALTER TABLE `DETALLE_COMPRAS` ADD COLUMN SUBTOTAL FLOAT AS (PRECIO_COMP * CANTIDAD_PRO);
ALTER TABLE `DETALLE_COMPRAS` ADD COLUMN IVA FLOAT NOT NULL DEFAULT 0.00;
ALTER TABLE `DETALLE_COMPRAS` ADD COLUMN TOTAL_CON_IVA FLOAT NOT NULL DEFAULT 0.00;
ALTER TABLE `DETALLE_COMPRAS` DROP COLUMN INCLUYE_IVA;
ALTER TABLE `COMPRAS` ADD COLUMN TOTAL_CON_DESCUENTO FLOAT AS (TOTAL_COMP - (TOTAL_COMP*DESCUENTO_COMP));
